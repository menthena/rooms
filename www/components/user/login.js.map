{"version":3,"sources":["app/components/user/login.ts"],"names":["Login","Login.constructor","Login.submitLoginForm"],"mappings":";;;;;;;;;AAAA,qBAA8C,eAAe,CAAC,CAAA;AAC9D,uBAAuD,iBAAiB,CAAC,CAAA;AACzE,uBAAiC,iBAAiB,CAAC,CAAA;AAEnD,kCAA+B,oCAAoC,CAAC,CAAA;AACpE,+BAA6B,iCAAiC,CAAC,CAAA;AAC/D,4BAA0B,4BAA4B,CAAC,CAAA;AACvD,2BAAyB,2BAA2B,CAAC,CAAA;AACrD,sBAA+B,uBAAuB,CAAC,CAAA;AAEvD;IAkEEA,eAAoBA,EAAeA,EAAUA,MAAcA,EAAUA,WAAwBA,EACnFA,cAA8BA,EAAUA,UAAsBA;QADpDC,OAAEA,GAAFA,EAAEA,CAAaA;QAAUA,WAAMA,GAANA,MAAMA,CAAQA;QAAUA,gBAAWA,GAAXA,WAAWA,CAAaA;QACnFA,mBAAcA,GAAdA,cAAcA,CAAgBA;QAAUA,eAAUA,GAAVA,UAAUA,CAAYA;QACtEA,IAAIA,CAACA,OAAOA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,OAAOA,CAACA;QACvCA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,CAACA,EAAEA,CAACA,KAAKA,CAACA;YAC7BA,KAAKA,EAAEA,CAACA,EAAEA,EAAEA,IAAIA,CAACA,cAAcA,CAACA,cAAcA,CAACA;YAC/CA,QAAQA,EAAEA,CAACA,EAAEA,EAAEA,mBAAUA,CAACA,QAAQA,CAACA;SACpCA,CAACA,CAACA;IACLA,CAACA;IAEDD,+BAAeA,GAAfA;QAAAE,iBAmBCA;QAlBCA,IAAIA,KAAKA,GAAGA,IAAIA,CAACA,SAASA,CAACA,KAAKA,CAACA;QACjCA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,CAACA;QACtBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,SAASA,CAACA,KAAKA,CAACA,CAACA,CAACA;YACzBA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA;YACvBA,IAAIA,CAACA,kBAAkBA,GAAGA,KAAKA,CAACA;YAEhCA,IAAIA,CAACA,WAAWA,CAACA,KAAKA,CAACA,KAAKA,CAACA,KAAKA,EAAEA,KAAKA,CAACA,QAAQA,CAACA;iBAChDA,GAAGA,CAACA,UAACA,GAAGA;gBACPA,UAAUA,CAACA;oBACTA,KAAIA,CAACA,UAAUA,GAAGA,KAAKA,CAACA;oBACxBA,EAAEA,CAACA,CAACA,CAACA,KAAIA,CAACA,WAAWA,CAACA,QAAQA,CAACA,CAACA,CAACA;wBAC/BA,KAAIA,CAACA,kBAAkBA,GAAGA,IAAIA,CAACA;oBACjCA,CAACA;oBAACA,IAAIA,CAACA,CAACA;wBACNA,KAAIA,CAACA,MAAMA,CAACA,QAAQA,CAACA,CAACA,SAASA,CAACA,CAACA,CAACA;oBACpCA,CAACA;gBACHA,CAACA,EAAEA,GAAGA,CAACA,CAACA;YACVA,CAACA,CAACA,CAACA;QACPA,CAACA;IACHA,CAACA;IA9FHF;QAACA,gBAASA,CAACA;YACTA,QAAQA,EAAEA,OAAOA;YACjBA,UAAUA,EAAEA,CAACA,eAAMA,EAAEA,oCAAgBA,EAAEA,mBAAUA,EAAEA,wBAAgBA,CAACA;YACpEA,SAASA,EAAEA,CAACA,gCAAgCA,CAACA;YAC7CA,QAAQA,EAAEA,i9EAoDTA;SACFA,CAACA;;cAuCDA;IAADA,YAACA;;AAADA,CAhGA,AAgGCA,IAAA;AArCY,aAAK,QAqCjB,CAAA","file":"app/components/user/login.js","sourcesContent":["import {Component, Output, EventEmitter} from 'angular2/core';\nimport {FormBuilder, NgForm, Validators, Control} from 'angular2/common';\nimport {Router, RouterLink} from 'angular2/router';\nimport {EMAIL_REGEX} from '../../config/constants';\nimport {LoadingIndicator} from '../../directives/loading-indicator';\nimport {UserValidators} from '../../validators/UserValidators';\nimport {UserService} from '../../services/UserService';\nimport {AppService} from '../../services/AppService';\nimport {IONIC_DIRECTIVES} from 'ionic-framework/ionic';\n\n@Component({\n  selector: 'login',\n  directives: [NgForm, LoadingIndicator, RouterLink, IONIC_DIRECTIVES],\n  styleUrls: ['styles/common/generic-form.css'],\n  template: `\n  <ion-content>\n    <div [ngClass]=\"{'animated slideInRight': isIonic, 'generic-form': true}\">\n      <form [ngFormModel]=\"loginForm\" (ngSubmit)=\"submitLoginForm($event)\" novalidate>\n        <fieldset>\n          <legend>Login</legend>\n          <div class=\"white-bg\">\n            <div class=\"server-err\" [class.active]=\"invalidCredentials\">\n              <i class=\"fa fa-exclamation-circle\"></i> Invalid email or password\n            </div>\n            <div class=\"input-group\">\n              <label for=\"email\">\n                Email\n              </label>\n              <input type=\"email\" placeholder=\"Please enter your email\" name=\"email\" id=\"email\"\n                ngControl=\"email\">\n              <div [class.active]=\"(submitted || loginForm.controls.email.touched) && !loginForm.controls.email.valid\" class=\"err\">\n                <div *ngIf=\"loginForm.controls.email.errors && loginForm.controls.email.errors.required\">\n                  <i class=\"fa fa-exclamation-circle\"></i> Please enter your email\n                </div>\n                <div *ngIf=\"loginForm.controls.email.errors && loginForm.controls.email.errors.invalid\">\n                  <i class=\"fa fa-exclamation-circle\"></i> Please enter a valid email\n                </div>\n              </div>\n\n            </div>\n            <div class=\"input-group\">\n              <label for=\"password\">\n                Password\n              </label>\n              <input type=\"password\" placeholder=\"Please enter your password\" name=\"password\"\n                id=\"password\" ngControl=\"password\">\n              <div [class.active]=\"(submitted || loginForm.controls.password.touched) && !loginForm.controls.password.valid\" class=\"err\">\n                  <i class=\"fa fa-exclamation-circle\"></i> Please enter your password\n              </div>\n            </div>\n            <div class=\"buttons\">\n              <button class=\"btn\" [class.submitting]=\"submitting\">\n                <span>Log in</span>\n              </button>\n            </div>\n            <div class=\"sub-form\">\n              You forgot your password? It is okay, we all have been there. <a [routerLink]=\"['/RecoverPassword']\">Recover password</a>.\n              <div>\n                OR you can <a [routerLink]=\"['/Register']\">register</a>.\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      </form>\n    </div>\n  </ion-content>\n  `\n})\n\nexport class Login {\n  loginForm;\n  submitted: boolean;\n  invalidCredentials: boolean;\n  isIonic: boolean;\n  submitting: boolean;\n\n  constructor(private fb: FormBuilder, private router: Router, private UserService: UserService,\n    private UserValidators: UserValidators, private AppService: AppService) {\n    this.isIonic = this.AppService.isIonic;\n    this.loginForm = this.fb.group({\n      email: ['', this.UserValidators.EmailValidator],\n      password: ['', Validators.required]\n    });\n  }\n\n  submitLoginForm() {\n    let login = this.loginForm.value;\n    this.submitted = true;\n    if (this.loginForm.valid) {\n      this.submitting = true;\n      this.invalidCredentials = false;\n\n      this.UserService.login(login.email, login.password)\n        .add((res) => {\n          setTimeout(() => {\n            this.submitting = false;\n            if (!this.UserService.isLogged) {\n              this.invalidCredentials = true;\n            } else {\n              this.router.navigate(['Reserve']);\n            }\n          }, 250);\n        });\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}