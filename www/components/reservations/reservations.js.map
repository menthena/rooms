{"version":3,"sources":["app/components/reservations/reservations.ts"],"names":["Reservations","Reservations.constructor","Reservations.ngOnInit","Reservations.cancelReservation"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAgDEA,sBAAoBA,kBAAsCA,EAC9CA,WAAwBA,EAAUA,MAAcA;oBADxCC,uBAAkBA,GAAlBA,kBAAkBA,CAAoBA;oBAC9CA,gBAAWA,GAAXA,WAAWA,CAAaA;oBAAUA,WAAMA,GAANA,MAAMA,CAAQA;oBAL5DA,iBAAYA,GAAGA,EAAEA,CAACA;oBAOhBA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,CAACA;oBACtBA,EAAEA,CAACA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,QAAQA,CAACA,CAACA,CAACA;wBAC/BA,IAAIA,CAACA,MAAMA,CAACA,QAAQA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA;oBAClCA,CAACA;gBACHA,CAACA;gBAEDD,+BAAQA,GAARA;oBAAAE,iBASCA;oBARCA,IAAIA,CAACA,kBAAkBA,CAACA,iBAAiBA,EAAEA;yBACxCA,KAAKA,CAACA,GAAGA,CAACA;yBACVA,SAASA,CAACA,UAACA,GAAGA;wBACbA,KAAIA,CAACA,SAASA,GAAGA,KAAKA,CAACA;wBACvBA,IAAIA,YAAYA,GAAGA,GAAGA,CAACA,IAAIA,EAAEA,CAACA,IAAIA,CAACA;wBACnCA,KAAIA,CAACA,YAAYA,GAAGA,YAAYA,CAACA;oBACnCA,CAACA,CAACA,CAACA;gBAEPA,CAACA;gBAEDF,wCAAiBA,GAAjBA,UAAkBA,aAAaA,EAAEA,SAASA;oBAA1CG,iBASCA;oBARCA,IAAIA,CAACA,UAAUA,GAAGA,aAAaA,CAACA;oBAChCA,IAAIA,CAACA,kBAAkBA,CAACA,iBAAiBA,CAACA,aAAaA,EAAEA,SAASA,CAACA;yBAChEA,GAAGA,CAACA;wBACHA,UAAUA,CAACA;4BACTA,KAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA;4BACvBA,CAACA,CAACA,MAAMA,CAACA,KAAIA,CAACA,YAAYA,EAAEA,EAAEA,aAAaA,EAAEA,aAAaA,EAAEA,CAACA,CAACA;wBAChEA,CAACA,EAAEA,GAAGA,CAACA,CAACA;oBACVA,CAACA,CAACA,CAACA;gBACPA,CAACA;gBA7EHH;oBAACA,gBAASA,CAACA;wBACTA,UAAUA,EAAEA,CAACA,oCAAgBA,EAAEA,mBAAUA,CAACA;wBAC1CA,QAAQA,EAAEA,cAAcA;wBACxBA,QAAQA,EAAEA,w5CAoCTA;wBACDA,SAASA,EAAEA,CAACA,yBAAyBA,CAACA;qBACvCA,CAACA;;iCAsCDA;gBAADA,mBAACA;YAADA,CA/EA,AA+ECA,IAAA;YA/ED,uCA+EC,CAAA","file":"app/components/reservations/reservations.js","sourcesContent":["import {Component, OnInit} from 'angular2/core';\nimport {Router, RouterLink} from 'angular2/router';\nimport {UserService} from '../../services/UserService';\nimport {LoadingIndicator} from '../../directives/loading-indicator';\nimport {ReservationService} from '../../services/ReservationService';\n\ndeclare var _: any;\n\n@Component({\n  directives: [LoadingIndicator, RouterLink],\n  selector: 'reservations',\n  template: `\n    <div class=\"container\">\n      <loading-indicator *ngIf=\"isLoading\"></loading-indicator>\n      <div class=\"no-reservation text-center\" *ngIf=\"!isLoading && reservations.length === 0\">\n        <div>\n          You have no reservations coming up.\n        </div>\n        <a [routerLink]=\"['/Reserve']\">Reserve a room</a>\n      </div>\n      <div *ngIf=\"reservations.length > 0\">\n        <h1>Upcoming reservations</h1>\n        <table class=\"table\">\n          <tr>\n            <th>Date</th>\n            <th>Ends</th>\n            <th>Room</th>\n            <th>Description</th>\n            <th>Actions</th>\n          <tr>\n          <tr *ngFor=\"#reservation of reservations\" [class.cancelling]=\"cancelling === reservation.reservationID\">\n            <td>{{ reservation.reservationDate }}</td>\n            <td>{{ reservation.reservationEndDate }}</td>\n            <td>{{ reservation.room }}</td>\n            <td>{{ reservation.description }}</td>\n            <td>\n              <a (click)=\"cancelReservation(reservation.reservationID)\">\n                <i class=\"fa fa-times\"></i> Cancel\n              </a>\n              <a (click)=\"cancelReservation(reservation.reservationID, true)\" *ngIf=\"reservation.recurring\">\n                <i class=\"fa fa-times\"></i> Cancel recurring\n              </a>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  `,\n  styleUrls: ['styles/reservations.css']\n})\n\nexport class Reservations {\n  reservations = [];\n  isLoading: boolean;\n  cancelling: string;\n\n  constructor(private ReservationService: ReservationService,\n      private UserService: UserService, private router: Router\n    ) {\n    this.isLoading = true;\n    if (!this.UserService.isLogged) {\n      this.router.navigate(['Login']);\n    }\n  }\n\n  ngOnInit() {\n    this.ReservationService.fetchReservations()\n      .delay(250)\n      .subscribe((res) => {\n        this.isLoading = false;\n        let reservations = res.json().data;\n        this.reservations = reservations;\n      });\n\n  }\n\n  cancelReservation(reservationID, recurring) {\n    this.cancelling = reservationID;\n    this.ReservationService.cancelReservation(reservationID, recurring)\n      .add(() => {\n        setTimeout(() => {\n          this.cancelling = null;\n          _.remove(this.reservations, { reservationID: reservationID });\n        }, 400);\n      });\n  }\n\n}\n"],"sourceRoot":"/source/"}