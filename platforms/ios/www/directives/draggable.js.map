{"version":3,"sources":["app/directives/draggable.ts"],"names":["Draggable","Draggable.constructor","Draggable.ngOnInit"],"mappings":";;;;;;;;;;;;;;;;;;;;;YAKA;gBAUEA,mBAAoBA,UAAsBA,EAAUA,aAA4BA;oBAA5DC,eAAUA,GAAVA,UAAUA,CAAYA;oBAAUA,kBAAaA,GAAbA,aAAaA,CAAeA;gBAAGA,CAACA;gBAEpFD,4BAAQA,GAARA;oBACEE,IAAIA,UAAUA,GAAGA,IAAIA,CAACA,aAAaA,CAACA,eAAeA,CAACA;oBACpDA,IAAIA,aAAaA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,aAAaA,CAACA;oBAClDA,EAAEA,CAACA,CAACA,UAAUA,CAACA,CAACA,CAACA;wBACfA,IAAIA,OAAOA,GAAGA,EAAEA,CAACA;wBACjBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;4BACfA,OAAOA,GAAGA;gCACRA,OAAOA,EAAEA,GAAGA;gCACZA,MAAMA,EAAEA,OAAOA;6BAChBA,CAACA;wBACJA,CAACA;wBAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA;4BAC5BA,OAAOA,GAAGA;gCACRA,WAAWA,EAAEA,IAAIA,CAACA,WAAWA;6BAC9BA,CAACA;wBACJA,CAACA;wBACDA,MAAMA,CAACA,aAAaA,CAACA,CAACA,SAASA,CAACA,OAAOA,CAACA,CAACA;oBAC3CA,CAACA;oBAACA,IAAIA,CAACA,CAACA;wBACNA,EAAEA,CAACA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,QAAQA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA;4BACnDA,MAAMA,CAACA,aAAaA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;wBAC7CA,CAACA;oBACHA,CAACA;gBACHA,CAACA;gBA1BDF;oBAACA,YAAKA,EAAEA;;mBAACA,4BAAKA,UAAUA;gBACxBA;oBAACA,YAAKA,EAAEA;;mBAACA,kCAAWA,UAASA;gBAR/BA;oBAACA,gBAASA,CAACA;wBACTA,QAAQA,EAAEA,qBAAqBA;wBAC/BA,UAAUA,EAAEA,CAACA,OAAOA,EAAEA,aAAaA,CAACA;qBACrCA,CAACA;oBAEDA,iBAAUA,EAAEA;;8BA6BZA;gBAADA,gBAACA;YAADA,CAlCA,AAkCCA,IAAA;YAlCD,iCAkCC,CAAA;YAAA,CAAC","file":"app/directives/draggable.js","sourcesContent":["import {Directive, OnInit, ElementRef, Input, Injectable, OnChanges} from 'angular2/core';\nimport {DesignService} from '../services/DesignService';\n\ndeclare var jQuery: any;\n\n@Directive({\n  selector: '[draggable-element]',\n  properties: ['clone', 'containment']\n})\n\n@Injectable()\nexport class Draggable implements OnInit {\n  @Input() clone: boolean;\n  @Input() containment: string;\n\n  constructor(private elementRef: ElementRef, private DesignService: DesignService) {}\n\n  ngOnInit() {\n    let designMode = this.DesignService.designModeState;\n    let nativeElement = this.elementRef.nativeElement;\n    if (designMode) {\n      let options = {};\n      if (this.clone) {\n        options = {\n          opacity: 0.8,\n          helper: 'clone'\n        };\n      } else if (this.containment) {\n        options = {\n          containment: this.containment\n        };\n      }\n      jQuery(nativeElement).draggable(options);\n    } else {\n      if (jQuery(nativeElement).hasClass('ui-draggable')) {\n        jQuery(nativeElement).draggable('destroy');\n      }\n    }\n  }\n};\n"],"sourceRoot":"/source/"}