{"version":3,"sources":["app/services/FloorService.ts"],"names":["FloorService","FloorService.constructor","FloorService.deleteFloor","FloorService.addFloor","FloorService.updateFloor","FloorService.changeOrder","FloorService.fetchAll"],"mappings":";;;;;;;;;AAAA,qBAAyB,eAAe,CAAC,CAAA;AACzC,qBAAsC,eAAe,CAAC,CAAA;AAEtD,2BAAsB,sBAAsB,CAAC,CAAA;AAkB7C;IAIEA,sBAAoBA,IAAUA;QAAVC,SAAIA,GAAJA,IAAIA,CAAMA;QAC5BA,IAAIA,CAACA,MAAMA,GAAGA,IAAIA,KAAKA,EAAUA,CAACA;QAClCA,yGAAyGA;QACzGA,EAAEA,CAACA,CAAQA,IAAIA,CAACA,IAAKA,CAACA,QAAQA,CAACA,WAAWA,CAACA,CAACA,CAACA;YAC3CA,IAAIA,MAAMA,GAAUA,IAAIA,CAACA,IAAKA,CAACA,QAAQA,CAACA,WAAWA,CAACA,KAAKA,CAACA;YACnDA,IAAIA,CAACA,IAAKA,CAACA,QAAQA,CAACA,WAAWA,CAACA,KAAKA,GAAGA;gBAC7CA,IAAIA,IAAIA,GAAIA,MAAMA,EAAEA,CAACA;gBACrBA,IAAIA,CAACA,eAAeA,GAAGA,IAAIA,CAACA;gBAC5BA,MAAMA,CAACA,IAAIA,CAACA;YACdA,CAACA,CAACA;QACJA,CAACA;IACHA,CAACA;IAEDD,kCAAWA,GAAXA,UAAYA,OAAeA;QACzBE,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,oBAAOA,GAAGA,aAAaA,GAAGA,OAAOA,CAACA,CAACA;IAC7DA,CAACA;IAEDF,+BAAQA,GAARA,UAASA,SAAiBA;QACxBG,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,oBAAOA,GAAGA,YAAYA,EAAEA,IAAIA,CAACA,SAASA,CAACA;YAC3DA,SAASA,EAAEA,SAASA;SACrBA,CAACA,EAAEA;YACFA,OAAOA,EAAEA,IAAIA,cAAOA,CAACA,EAAEA,cAAcA,EAAEA,kBAAkBA,EAAEA,CAACA;SAC7DA,CAACA,CAACA;IACLA,CAACA;IAEDH,kCAAWA,GAAXA,UAAYA,OAAeA,EAAEA,SAAiBA;QAC5CI,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,oBAAOA,GAAGA,aAAaA,GAAGA,OAAOA,EAAEA,IAAIA,CAACA,SAASA,CAACA,SAASA,CAACA,EAAEA;YACnFA,OAAOA,EAAEA,IAAIA,cAAOA,CAACA,EAAEA,cAAcA,EAAEA,kBAAkBA,EAAEA,CAACA;SAC7DA,CAACA,CAACA;IACLA,CAACA;IAEDJ,kCAAWA,GAAXA,UAAYA,OAAeA,EAAEA,SAAiBA;QAC5CK,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,oBAAOA,GAAGA,yBAAyBA,EAAEA,IAAIA,CAACA,SAASA,CAACA;YACvEA,OAAOA,EAAEA,OAAOA;YAChBA,SAASA,EAAEA,SAASA;SACrBA,CAACA,EAAEA;YACFA,OAAOA,EAAEA,IAAIA,cAAOA,CAACA,EAAEA,cAAcA,EAAEA,kBAAkBA,EAAEA,CAACA;SAC7DA,CAACA,CAACA;IACLA,CAACA;IAEDL,+BAAQA,GAARA;QACEM,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,oBAAOA,GAAGA,YAAYA,EAAEA;YAC3CA,OAAOA,EAAEA,IAAIA,cAAOA,CAACA;gBACnBA,eAAeA,EAAEA,QAAQA,GAAGA,MAAMA,CAACA,IAAIA,CAACA,oBAAoBA,CAACA;aAC9DA,CAACA;SACHA,CAACA,CAACA;IACLA,CAACA;IAlDHN;QAACA,iBAAUA,EAAEA;;qBAmDZA;IAADA,mBAACA;;AAADA,CAnDA,AAmDCA,IAAA;AAlDY,oBAAY,eAkDxB,CAAA","file":"app/services/FloorService.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Http, Response, Headers} from 'angular2/http';\nimport {Observable} from 'rxjs';\nimport {ENV_URL} from '../config/app.config';\n\ndeclare var window: any;\n\ninterface IFloorService<T> {\n  fetchAll();\n  deleteFloor(floorID: string);\n  addFloor(floorName: string);\n  updateFloor(floorID: string, floorData: Object);\n  changeOrder(floorID: string, direction: string);\n}\n\nexport interface IFloor {\n  floorID: string;\n  order: number;\n  floorName: string;\n}\n\n@Injectable()\nexport class FloorService implements IFloorService<IFloor> {\n  floors: Array<IFloor>;\n\n  constructor(private http: Http) {\n    this.floors = new Array<IFloor>();\n    // TODO: Use official Angular2 CORS support when merged (https://github.com/angular/angular/issues/4231).\n    if ((<any> this.http)._backend._browserXHR) {\n      let _build = (<any> this.http)._backend._browserXHR.build;\n      (<any> this.http)._backend._browserXHR.build = () => {\n        let _xhr =  _build();\n        _xhr.withCredentials = true;\n        return _xhr;\n      };\n    }\n  }\n\n  deleteFloor(floorID: string) {\n    return this.http.delete(ENV_URL + '/api/floor/' + floorID);\n  }\n\n  addFloor(floorName: string) {\n    return this.http.post(ENV_URL + '/api/floor', JSON.stringify({\n      floorName: floorName\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n  }\n\n  updateFloor(floorID: string, floorData: Object) {\n    return this.http.patch(ENV_URL + '/api/floor/' + floorID, JSON.stringify(floorData), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n  }\n\n  changeOrder(floorID: string, direction: string) {\n    return this.http.put(ENV_URL + '/api/floor/change-order', JSON.stringify({\n      floorID: floorID,\n      direction: direction\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n  }\n\n  fetchAll() {\n    return this.http.get(ENV_URL + '/api/floor', {\n      headers: new Headers({\n        'Authorization': 'Basic ' + window.btoa('asd@asd.com:asdasd')\n      })\n    });\n  }\n}\n"],"sourceRoot":"/source/"}