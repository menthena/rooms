{"version":3,"sources":["app/services/FloorService.ts"],"names":["FloorService","FloorService.constructor","FloorService.deleteFloor","FloorService.addFloor","FloorService.updateFloor","FloorService.changeOrder","FloorService.fetchAll"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;YAkBA;gBAIEA,sBAAoBA,IAAUA;oBAAVC,SAAIA,GAAJA,IAAIA,CAAMA;oBAC5BA,IAAIA,CAACA,MAAMA,GAAGA,IAAIA,KAAKA,EAAUA,CAACA;gBACpCA,CAACA;gBAEDD,kCAAWA,GAAXA,UAAYA,OAAeA;oBACzBE,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,MAAMA,CAACA,oBAAOA,GAAGA,aAAaA,GAAGA,OAAOA,CAACA,CAACA;gBAC7DA,CAACA;gBAEDF,+BAAQA,GAARA,UAASA,SAAiBA;oBACxBG,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,IAAIA,CAACA,oBAAOA,GAAGA,YAAYA,EAAEA,IAAIA,CAACA,SAASA,CAACA;wBAC3DA,SAASA,EAAEA,SAASA;qBACrBA,CAACA,EAAEA;wBACFA,OAAOA,EAAEA,IAAIA,cAAOA,CAACA,EAAEA,cAAcA,EAAEA,kBAAkBA,EAAEA,CAACA;qBAC7DA,CAACA,CAACA;gBACLA,CAACA;gBAEDH,kCAAWA,GAAXA,UAAYA,OAAeA,EAAEA,SAAiBA;oBAC5CI,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,KAAKA,CAACA,oBAAOA,GAAGA,aAAaA,GAAGA,OAAOA,EAAEA,IAAIA,CAACA,SAASA,CAACA,SAASA,CAACA,EAAEA;wBACnFA,OAAOA,EAAEA,IAAIA,cAAOA,CAACA,EAAEA,cAAcA,EAAEA,kBAAkBA,EAAEA,CAACA;qBAC7DA,CAACA,CAACA;gBACLA,CAACA;gBAEDJ,kCAAWA,GAAXA,UAAYA,OAAeA,EAAEA,SAAiBA;oBAC5CK,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,oBAAOA,GAAGA,yBAAyBA,EAAEA,IAAIA,CAACA,SAASA,CAACA;wBACvEA,OAAOA,EAAEA,OAAOA;wBAChBA,SAASA,EAAEA,SAASA;qBACrBA,CAACA,EAAEA;wBACFA,OAAOA,EAAEA,IAAIA,cAAOA,CAACA,EAAEA,cAAcA,EAAEA,kBAAkBA,EAAEA,CAACA;qBAC7DA,CAACA,CAACA;gBACLA,CAACA;gBAEDL,+BAAQA,GAARA;oBACEM,MAAMA,CAACA,IAAIA,CAACA,IAAIA,CAACA,GAAGA,CAACA,oBAAOA,GAAGA,YAAYA,CAACA,CAACA;gBAC/CA,CAACA;gBArCHN;oBAACA,iBAAUA,EAAEA;;iCAsCZA;gBAADA,mBAACA;YAADA,CAtCA,AAsCCA,IAAA;YAtCD,uCAsCC,CAAA","file":"app/services/FloorService.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Http, Response, Headers} from 'angular2/http';\nimport {ENV_URL} from '../app.config';\n\ninterface IFloorService<T> {\n  fetchAll();\n  deleteFloor(floorID: string);\n  addFloor(floorName: string);\n  updateFloor(floorID: string, floorData: Object);\n  changeOrder(floorID: string, direction: string);\n}\n\nexport interface IFloor {\n  floorID: string;\n  order: number;\n  floorName: string;\n}\n\n@Injectable()\nexport class FloorService implements IFloorService<IFloor> {\n  floors: Array<IFloor>;\n\n  constructor(private http: Http) {\n    this.floors = new Array<IFloor>();\n  }\n\n  deleteFloor(floorID: string) {\n    return this.http.delete(ENV_URL + '/api/floor/' + floorID);\n  }\n\n  addFloor(floorName: string) {\n    return this.http.post(ENV_URL + '/api/floor', JSON.stringify({\n      floorName: floorName\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n  }\n\n  updateFloor(floorID: string, floorData: Object) {\n    return this.http.patch(ENV_URL + '/api/floor/' + floorID, JSON.stringify(floorData), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n  }\n\n  changeOrder(floorID: string, direction: string) {\n    return this.http.put(ENV_URL + '/api/floor/change-order', JSON.stringify({\n      floorID: floorID,\n      direction: direction\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n  }\n\n  fetchAll() {\n    return this.http.get(ENV_URL + '/api/floor');\n  }\n}\n"],"sourceRoot":"/source/"}