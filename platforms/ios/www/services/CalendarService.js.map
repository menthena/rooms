{"version":3,"sources":["app/services/CalendarService.ts"],"names":["CalendarService","CalendarService.constructor","CalendarService.addEvent","CalendarService.removeEvent","CalendarService.fetchCalendars","CalendarService.fetchEvents","CalendarService.saveGoogleToken","CalendarService.authorize","CalendarService.loadCalendar"],"mappings":"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","file":"app/services/CalendarService.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Observable} from 'rxjs';\nimport {Http, Response, Headers} from 'angular2/http';\nimport {CLIENT_ID, SCOPES} from '../config/constants';\n\ndeclare var gapi: any;\n\ninterface ICalendarService {\n  saveGoogleToken(token: String);\n  authorize(callback: Function);\n  loadCalendar();\n  fetchCalendars();\n  fetchEvents();\n  addEvent(event: Object);\n  removeEvent(event: Object);\n}\n\n@Injectable()\nexport class CalendarService implements ICalendarService {\n\n  constructor(private http: Http) {\n    // TODO: Use official Angular2 CORS support when merged (https://github.com/angular/angular/issues/4231).\n    if ((<any> this.http)._backend && (<any> this.http)._backend._browserXHR) {\n      let _build = (<any> this.http)._backend._browserXHR.build;\n      (<any> this.http)._backend._browserXHR.build = () => {\n        let _xhr =  _build();\n        _xhr.withCredentials = true;\n        return _xhr;\n      };\n    }\n  }\n\n  addEvent(event) {\n    console.log('tick');\n  }\n\n  removeEvent(event) {\n    console.log('tick');\n  }\n\n  fetchCalendars() {\n    return;\n    // var request = gapi.client.calendar.events.list({\n    //   'calendarId': 'primary',\n    //   'timeMin': (new Date()).toISOString(),\n    //   'showDeleted': false,\n    //   'singleEvents': true,\n    //   'maxResults': 10,\n    //   'orderBy': 'startTime'\n    // });\n    //\n    // request.execute((resp) => {\n    //   var events = resp.items;\n    //   if (events.length > 0) {\n    //     for (let i = 0; i < events.length; i++) {\n    //       var event = events[i];\n    //       var when = event.start.dateTime;\n    //       if (!when) {\n    //         when = event.start.date;\n    //       }\n    //       console.log(event.summary + ' (' + when + ')');\n    //     }\n    //   } else {\n    //     console.log('No upcoming events found.');\n    //   }\n    // });\n  }\n\n  fetchEvents() {\n    return ;\n    // this.authorize(() => {\n    //   var request = gapi.client.calendar.events.list({\n    //     'calendarId': 'primary',\n    //     'timeMin': (new Date()).toISOString(),\n    //     'showDeleted': false,\n    //     'singleEvents': true,\n    //     'maxResults': 10,\n    //     'orderBy': 'startTime'\n    //   });\n    //\n    //   request.execute((resp) => {\n    //     var events = resp.items;\n    //     if (events.length > 0) {\n    //       for (let i = 0; i < events.length; i++) {\n    //         var event = events[i];\n    //         var when = event.start.dateTime;\n    //         if (!when) {\n    //           when = event.start.date;\n    //         }\n    //         console.log(event.summary + ' (' + when + ')');\n    //       }\n    //     } else {\n    //       console.log('No upcoming events found.');\n    //     }\n    //   });\n    // });\n  }\n\n\n  saveGoogleToken(token) {\n    this.http.patch('/api/company', JSON.stringify({\n      googleToken: token\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    }).subscribe((res) => {\n      console.log(res);\n    }, (err) => {\n      console.log(err);\n    });\n  }\n\n  authorize(callback: Function) {\n    return;\n    // if (gapi) {\n    //   gapi.auth.authorize({\n    //     client_id: CLIENT_ID,\n    //     scope: SCOPES,\n    //     immediate: false\n    //   }, (res) => {\n    //     this.saveGoogleToken(res.access_token);\n    //     this.loadCalendar();\n    //     callback(res);\n    //   });\n    // }\n  }\n\n  loadCalendar() {\n    return ;\n    // gapi.client.load('calendar', 'v3', () => {\n    //   console.log('tick');\n    // });\n  }\n\n}\n"],"sourceRoot":"/source/"}