{"version":3,"sources":["app/components/user/reset-password.ts"],"names":["ResetPassword","ResetPassword.constructor","ResetPassword.submitLoginForm"],"mappings":";;;;;;;;;AAAA,qBAAwB,eAAe,CAAC,CAAA;AACxC,uBAAuD,iBAAiB,CAAC,CAAA;AACzE,uBAA8C,iBAAiB,CAAC,CAAA;AAChE,kCAA+B,oCAAoC,CAAC,CAAA;AACpE,+BAA6B,iCAAiC,CAAC,CAAA;AAC/D,4BAA0B,4BAA4B,CAAC,CAAA;AAEvD;IA6EEA,uBAAoBA,EAAeA,EAAUA,MAAcA,EAAUA,WAAwBA,EACnFA,cAA8BA,EAAUA,WAAwBA;QADtDC,OAAEA,GAAFA,EAAEA,CAAaA;QAAUA,WAAMA,GAANA,MAAMA,CAAQA;QAAUA,gBAAWA,GAAXA,WAAWA,CAAaA;QACnFA,mBAAcA,GAAdA,cAAcA,CAAgBA;QAAUA,gBAAWA,GAAXA,WAAWA,CAAaA;QACxEA,IAAIA,CAACA,iBAAiBA,GAAGA,IAAIA,CAACA,EAAEA,CAACA,KAAKA,CAACA;YACrCA,KAAKA,EAAEA,CAACA,EAAEA,EAAEA,IAAIA,CAACA,cAAcA,CAACA,cAAcA,CAACA;YAC/CA,QAAQA,EAAEA,CAACA,EAAEA,EAAEA,IAAIA,CAACA,cAAcA,CAACA,iBAAiBA,CAACA;SACtDA,CAACA,CAACA;IACLA,CAACA;IAEDD,uCAAeA,GAAfA;QAAAE,iBAuBCA;QAtBCA,IAAIA,aAAaA,GAAGA,IAAIA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA;QACjDA,IAAIA,CAACA,SAASA,GAAGA,IAAIA,CAACA;QACtBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,iBAAiBA,CAACA,KAAKA,CAACA,CAACA,CAACA;YACjCA,IAAIA,CAACA,UAAUA,GAAGA,IAAIA,CAACA;YACvBA,IAAIA,CAACA,kBAAkBA,GAAGA,KAAKA,CAACA;YAChCA,IAAIA,CAACA,WAAWA,CAACA,aAAaA,CAACA,aAAaA,CAACA,KAAKA,EAAEA,aAAaA,CAACA,QAAQA,EAAEA,IAAIA,CAACA,WAAWA,CAACA,MAAMA,CAACA,IAAIA,CAACA,CAACA;iBACvGA,SAASA,CAACA,UAACA,GAAGA;gBACbA,UAAUA,CAACA;oBACTA,KAAIA,CAACA,UAAUA,GAAGA,KAAKA,CAACA;oBACxBA,KAAIA,CAACA,OAAOA,GAAGA,IAAIA,CAACA;gBACtBA,CAACA,EAAEA,GAAGA,CAACA,CAACA;YACVA,CAACA,EAAEA,UAACA,GAAGA;gBACLA,UAAUA,CAACA;oBACTA,KAAIA,CAACA,UAAUA,GAAGA,KAAKA,CAACA;oBACxBA,EAAEA,CAACA,CAACA,GAAGA,CAACA,MAAMA,KAAKA,GAAGA,CAACA,CAACA,CAACA;wBACvBA,KAAIA,CAACA,KAAKA,GAAGA,gCAAgCA,CAACA;oBAChDA,CAACA;oBAACA,IAAIA,CAACA,CAACA;wBACNA,KAAIA,CAACA,KAAKA,GAAGA,sBAAsBA,CAACA;oBACtCA,CAACA;gBACHA,CAACA,EAAEA,GAAGA,CAACA,CAACA;YACVA,CAACA,CAACA,CAACA;QACPA,CAACA;IACHA,CAACA;IA5GHF;QAACA,gBAASA,CAACA;YACTA,QAAQA,EAAEA,gBAAgBA;YAC1BA,UAAUA,EAAEA,CAACA,eAAMA,EAAEA,oCAAgBA,EAAEA,mBAAUA,CAACA;YAClDA,SAASA,EAAEA,CAACA,gCAAgCA,CAACA;YAC7CA,QAAQA,EAAEA,69FA8DTA;SACFA,CAACA;;sBA2CDA;IAADA,oBAACA;;AAADA,CA9GA,AA8GCA,IAAA;AAzCY,qBAAa,gBAyCzB,CAAA","file":"app/components/user/reset-password.js","sourcesContent":["import {Component} from 'angular2/core';\nimport {FormBuilder, NgForm, Validators, Control} from 'angular2/common';\nimport {Router, RouterLink, RouteParams} from 'angular2/router';\nimport {LoadingIndicator} from '../../directives/loading-indicator';\nimport {UserValidators} from '../../validators/UserValidators';\nimport {UserService} from '../../services/UserService';\n\n@Component({\n  selector: 'reset-password',\n  directives: [NgForm, LoadingIndicator, RouterLink],\n  styleUrls: ['styles/common/generic-form.css'],\n  template: `\n  <div class=\"generic-form\">\n    <form [ngFormModel]=\"resetPasswordForm\" (ngSubmit)=\"submitLoginForm($event)\" novalidate>\n      <fieldset>\n        <legend>Reset password</legend>\n        <div class=\"white-bg\">\n          <div *ngIf=\"success\" class=\"success row\">\n            <div class=\"col-xs-1\">\n              <i class=\"fa fa-check\"></i>\n            </div>\n            <div class=\"col-xs-10 success-message\">\n              Successfully changed your password. Click <a [routerLink]=\"['/Login']\">here</a>\n              to login.\n            </div>\n          </div>\n          <div *ngIf=\"!success\">\n            <div class=\"server-err\" [class.active]=\"error\">\n              <i class=\"fa fa-exclamation-circle\"></i> {{ error }}\n            </div>\n            <div class=\"input-group\">\n              <label for=\"email\">\n                Email\n              </label>\n              <input type=\"email\" placeholder=\"Please enter your email\" name=\"email\" id=\"email\"\n                ngControl=\"email\">\n              <div [class.active]=\"(submitted || resetPasswordForm.controls.email.touched)\n                && !resetPasswordForm.controls.email.valid\" class=\"err\">\n                <div *ngIf=\"resetPasswordForm.controls.email.errors && resetPasswordForm.controls.email.errors.required\">\n                  <i class=\"fa fa-exclamation-circle\"></i> Please enter your email\n                </div>\n                <div *ngIf=\"resetPasswordForm.controls.email.errors && resetPasswordForm.controls.email.errors.invalid\">\n                  <i class=\"fa fa-exclamation-circle\"></i> Please enter a valid email\n                </div>\n              </div>\n\n            </div>\n            <div class=\"input-group\">\n              <label for=\"password\">\n                Password\n              </label>\n              <input type=\"password\" placeholder=\"Please enter your password\" name=\"password\"\n                id=\"password\" ngControl=\"password\">\n              <div [class.active]=\"(submitted || resetPasswordForm.controls.password.touched)\n                && !resetPasswordForm.controls.password.valid\" class=\"err\">\n                <div *ngIf=\"resetPasswordForm.controls.password.errors && resetPasswordForm.controls.password.errors.required\">\n                  <i class=\"fa fa-exclamation-circle\"></i> Please enter your password\n                </div>\n                <div *ngIf=\"resetPasswordForm.controls.password.errors && resetPasswordForm.controls.password.errors.minimum\">\n                  <i class=\"fa fa-exclamation-circle\"></i> Your password must have at least 6 characters\n                </div>\n              </div>\n            </div>\n            <div class=\"buttons\">\n              <button class=\"btn\" [class.submitting]=\"submitting\">\n                <span>Reset password</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n  </div>\n  `\n})\n\nexport class ResetPassword {\n  resetPasswordForm;\n  submitted: boolean;\n  invalidCredentials: boolean;\n  submitting: boolean;\n  error: string;\n  success: boolean;\n\n  constructor(private fb: FormBuilder, private router: Router, private UserService: UserService,\n    private UserValidators: UserValidators, private RouteParams: RouteParams) {\n    this.resetPasswordForm = this.fb.group({\n      email: ['', this.UserValidators.EmailValidator],\n      password: ['', this.UserValidators.PasswordValidator]\n    });\n  }\n\n  submitLoginForm() {\n    let resetPassword = this.resetPasswordForm.value;\n    this.submitted = true;\n    if (this.resetPasswordForm.valid) {\n      this.submitting = true;\n      this.invalidCredentials = false;\n      this.UserService.resetPassword(resetPassword.email, resetPassword.password, this.RouteParams.params['id'])\n        .subscribe((res) => {\n          setTimeout(() => {\n            this.submitting = false;\n            this.success = true;\n          }, 250);\n        }, (err) => {\n          setTimeout(() => {\n            this.submitting = false;\n            if (err.status === 404) {\n              this.error = 'Invalid token or email address';\n            } else {\n              this.error = 'Server error occured';\n            }\n          }, 250);\n        });\n    }\n  }\n\n}\n"],"sourceRoot":"/source/"}