{"version":3,"sources":["app/services/UserService.ts"],"names":["UserService","UserService.constructor","UserService.login","UserService.recoverPassword","UserService.resetPassword","UserService.changePassword","UserService.getUserObservable","UserService.getUser","UserService.register"],"mappings":"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","file":"app/services/UserService.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Http, Response, Headers} from 'angular2/http';\nimport {Observable} from 'rxjs';\nimport {ENV_URL} from '../config/app.config';\n\ndeclare var window: any;\n\ninterface IUserService {\n  login(email: string, password: string) : void;\n  recoverPassword(email: string) : void;\n  resetPassword(email: string, password: string, token: string) : void;\n  changePassword(oldPassword: string, newPassword: string) : void;\n  register(userObject: Object) : void;\n  getUser() : void;\n}\n\n@Injectable()\nexport class UserService implements IUserService {\n  public isLogged: boolean;\n  public userData: Object;\n  userObservable;\n\n  constructor(private http: Http) {\n    this.userObservable = Observable\n      .create(observer => {\n        return () => console.log('disposed');\n      }).publish();\n\n    // TODO: Use official Angular2 CORS support when merged (https://github.com/angular/angular/issues/4231).\n    let _build = (<any> this.http)._backend._browserXHR.build;\n    (<any> this.http)._backend._browserXHR.build = () => {\n      let _xhr =  _build();\n      _xhr.withCredentials = true;\n      return _xhr;\n    };\n  }\n\n  login(email: string, password: string) {\n    let observable = this.http.post(ENV_URL + '/oauth/login', JSON.stringify({\n      email: email,\n      password: password\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    let subscription = observable\n      .subscribe((res: any) => {\n        this.isLogged = true;\n        this.userData = res.json();\n        this.userObservable\n          .subscription\n          .next();\n        return res;\n      }, (err) => {\n        return err;\n      });\n    return subscription;\n  }\n\n  recoverPassword(email: string) {\n    let observable = this.http.post(ENV_URL + '/oauth/forgot-password', JSON.stringify({\n      email: email\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n\n  resetPassword(email: string, password: string, token: string) {\n    let observable = this.http.post('/oauth/reset-password', JSON.stringify({\n      email: email,\n      password: password,\n      token: token\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n\n  changePassword(oldPassword: string, newPassword: string) {\n    let observable = this.http.patch(ENV_URL + '/oauth/change-password', JSON.stringify({\n      oldPassword: oldPassword,\n      password: newPassword\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n\n  getUserObservable() {\n    return this.userObservable;\n  }\n\n  getUser() {\n    let observable = this.http.get(ENV_URL + '/oauth/tokeninfo');\n    let subscription = observable\n      .subscribe((res: any) => {\n        this.userData = res.json();\n        this.isLogged = true;\n        this.userObservable\n          .subscription\n          .next();\n        return res;\n      }, (err) => {\n        // this.isLogged = false;\n        return err;\n      });\n    return subscription;\n  }\n\n  register(userObject: Object) {\n    let observable = this.http.post(ENV_URL + '/api/user', JSON.stringify(userObject), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n}\n"],"sourceRoot":"/source/"}