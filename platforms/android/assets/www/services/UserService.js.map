{"version":3,"sources":["app/services/UserService.ts"],"names":["UserService","UserService.constructor","UserService.login","UserService.recoverPassword","UserService.resetPassword","UserService.changePassword","UserService.getUserObservable","UserService.getUser","UserService.register"],"mappings":"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","file":"app/services/UserService.js","sourcesContent":["import {Injectable} from 'angular2/core';\nimport {Http, Response, Headers} from 'angular2/http';\nimport {Observable} from 'rxjs';\nimport {ENV_URL} from '../app.config';\n\ninterface IUserService {\n  login(email: string, password: string) : void;\n  recoverPassword(email: string) : void;\n  resetPassword(email: string, password: string, token: string) : void;\n  changePassword(oldPassword: string, newPassword: string) : void;\n  register(userObject: Object) : void;\n  getUser() : void;\n}\n\n@Injectable()\nexport class UserService implements IUserService {\n  public isLogged: boolean;\n  public userData: Object;\n  userObservable;\n\n  constructor(private http: Http) {\n    this.userObservable = Observable\n      .create(observer => {\n        return () => console.log('disposed');\n      }).publish();\n  }\n\n  login(email: string, password: string) {\n    let observable = this.http.post(ENV_URL + '/oauth/login', JSON.stringify({\n      email: email,\n      password: password\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    let subscription = observable\n      .subscribe((res: any) => {\n        this.isLogged = true;\n        this.userData = res.json();\n        this.userObservable\n          .subscription\n          .next();\n        return res;\n      }, (err) => {\n        return err;\n      });\n    return subscription;\n  }\n\n  recoverPassword(email: string) {\n    let observable = this.http.post(ENV_URL + '/oauth/forgot-password', JSON.stringify({\n      email: email\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n\n  resetPassword(email: string, password: string, token: string) {\n    let observable = this.http.post('/oauth/reset-password', JSON.stringify({\n      email: email,\n      password: password,\n      token: token\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n\n  changePassword(oldPassword: string, newPassword: string) {\n    let observable = this.http.patch(ENV_URL + '/oauth/change-password', JSON.stringify({\n      oldPassword: oldPassword,\n      password: newPassword\n    }), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n\n  getUserObservable() {\n    return this.userObservable;\n  }\n\n  getUser() {\n    let observable = this.http.get(ENV_URL + '/oauth/tokeninfo');\n    let subscription = observable\n      .subscribe((res: any) => {\n        this.userData = res.json();\n        this.isLogged = true;\n        this.userObservable\n          .subscription\n          .next();\n        return res;\n      }, (err) => {\n        // this.isLogged = false;\n        return err;\n      });\n    return subscription;\n  }\n\n  register(userObject: Object) {\n    let observable = this.http.post(ENV_URL + '/api/user', JSON.stringify(userObject), {\n      headers: new Headers({ 'Content-Type': 'application/json' })\n    });\n    return observable;\n  }\n}\n"],"sourceRoot":"/source/"}