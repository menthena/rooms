{"version":3,"sources":["app/directives/draggable.ts"],"names":["Draggable","Draggable.constructor","Draggable.ngOnInit"],"mappings":";;;;;;;;;AAAA,qBAA0E,eAAe,CAAC,CAAA;AAC1F,8BAA4B,2BAA2B,CAAC,CAAA;AAIxD;IAUEA,mBAAoBA,UAAsBA,EAAUA,aAA4BA;QAA5DC,eAAUA,GAAVA,UAAUA,CAAYA;QAAUA,kBAAaA,GAAbA,aAAaA,CAAeA;IAAGA,CAACA;IAEpFD,4BAAQA,GAARA;QACEE,IAAIA,UAAUA,GAAGA,IAAIA,CAACA,aAAaA,CAACA,eAAeA,CAACA;QACpDA,IAAIA,aAAaA,GAAGA,IAAIA,CAACA,UAAUA,CAACA,aAAaA,CAACA;QAClDA,EAAEA,CAACA,CAACA,UAAUA,CAACA,CAACA,CAACA;YACfA,IAAIA,OAAOA,GAAGA,EAAEA,CAACA;YACjBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,KAAKA,CAACA,CAACA,CAACA;gBACfA,OAAOA,GAAGA;oBACRA,OAAOA,EAAEA,GAAGA;oBACZA,MAAMA,EAAEA,OAAOA;iBAChBA,CAACA;YACJA,CAACA;YAACA,IAAIA,CAACA,EAAEA,CAACA,CAACA,IAAIA,CAACA,WAAWA,CAACA,CAACA,CAACA;gBAC5BA,OAAOA,GAAGA;oBACRA,WAAWA,EAAEA,IAAIA,CAACA,WAAWA;iBAC9BA,CAACA;YACJA,CAACA;YACDA,MAAMA,CAACA,aAAaA,CAACA,CAACA,SAASA,CAACA,OAAOA,CAACA,CAACA;QAC3CA,CAACA;QAACA,IAAIA,CAACA,CAACA;YACNA,EAAEA,CAACA,CAACA,MAAMA,CAACA,aAAaA,CAACA,CAACA,QAAQA,CAACA,cAAcA,CAACA,CAACA,CAACA,CAACA;gBACnDA,MAAMA,CAACA,aAAaA,CAACA,CAACA,SAASA,CAACA,SAASA,CAACA,CAACA;YAC7CA,CAACA;QACHA,CAACA;IACHA,CAACA;IA1BDF;QAACA,YAAKA,EAAEA;;OAACA,4BAAKA,UAAUA;IACxBA;QAACA,YAAKA,EAAEA;;OAACA,kCAAWA,UAASA;IAR/BA;QAACA,gBAASA,CAACA;YACTA,QAAQA,EAAEA,qBAAqBA;YAC/BA,UAAUA,EAAEA,CAACA,OAAOA,EAAEA,aAAaA,CAACA;SACrCA,CAACA;QAEDA,iBAAUA,EAAEA;;kBA6BZA;IAADA,gBAACA;;AAADA,CAlCA,AAkCCA,IAAA;AA5BY,iBAAS,YA4BrB,CAAA;AAAA,CAAC","file":"app/directives/draggable.js","sourcesContent":["import {Directive, OnInit, ElementRef, Input, Injectable, OnChanges} from 'angular2/core';\nimport {DesignService} from '../services/DesignService';\n\ndeclare var jQuery: any;\n\n@Directive({\n  selector: '[draggable-element]',\n  properties: ['clone', 'containment']\n})\n\n@Injectable()\nexport class Draggable implements OnInit {\n  @Input() clone: boolean;\n  @Input() containment: string;\n\n  constructor(private elementRef: ElementRef, private DesignService: DesignService) {}\n\n  ngOnInit() {\n    let designMode = this.DesignService.designModeState;\n    let nativeElement = this.elementRef.nativeElement;\n    if (designMode) {\n      let options = {};\n      if (this.clone) {\n        options = {\n          opacity: 0.8,\n          helper: 'clone'\n        };\n      } else if (this.containment) {\n        options = {\n          containment: this.containment\n        };\n      }\n      jQuery(nativeElement).draggable(options);\n    } else {\n      if (jQuery(nativeElement).hasClass('ui-draggable')) {\n        jQuery(nativeElement).draggable('destroy');\n      }\n    }\n  }\n};\n"],"sourceRoot":"/source/"}