{"version":3,"sources":["app/components/floors/floors.ts"],"names":["Floors","Floors.constructor","Floors.ngOnInit","Floors.addFloor","Floors.fetchAll","Floors.changeSelectedFloor","Floors.showDeleteFloorConfirmation","Floors.deleteFloor","Floors.changeOrder"],"mappings":"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","file":"app/components/floors/floors.js","sourcesContent":["import {Component, OnInit} from 'angular2/core';\nimport {Observable} from 'rxjs';\nimport {FloorService, IFloor} from '../../services/FloorService';\nimport {AppService} from '../../services/AppService';\nimport {ReservationService} from '../../services/ReservationService';\nimport {DesignService} from '../../services/DesignService';\nimport {Floor} from './floor';\nimport {LoadingIndicator} from '../../directives/loading-indicator';\nimport {IONIC_DIRECTIVES} from 'ionic-framework/ionic';\n\ndeclare var _: any;\n\n@Component({\n  selector: 'floors',\n  directives: [Floor, LoadingIndicator, IONIC_DIRECTIVES],\n  template: `\n    <div *ngIf=\"isIonic\">\n      <ion-segment>\n       <ion-segment-button *ngFor=\"#floor of floors\"\n        [ngClass]=\"{'segment-activated': floor.floorID === selectedFloor}\"\n        (click)=\"changeSelectedFloor(floor.floorID)\">\n         {{ floor.floorName }}\n       </ion-segment-button>\n      </ion-segment>\n    </div>\n    <a *ngIf=\"designMode && floors && floors.length > 0\" (click)=\"addFloor()\"\n      class=\"add-floor btn\"><i class=\"fa fa-plus\"></i> Add floor</a>\n    <loading-indicator *ngIf=\"isLoading\"></loading-indicator>\n    <div *ngIf=\"floors\">\n      <div class=\"no-floor text-center\" *ngIf=\"!isLoading && floors.length === 0\">\n        <div>\n          No floors, why don't you add one?\n        </div>\n        <a *ngIf=\"designMode\" (click)=\"addFloor()\"><i class=\"fa fa-plus\"></i> Add floor</a>\n      </div>\n\n      <div *ngFor=\"#floor of floors\">\n        <div *ngIf=\"!isIonic || (isIonic && floor && floor.floorID == selectedFloor)\">\n          <div *ngIf=\"designMode\" class=\"pull-right\">\n            <a (click)=\"changeOrder(floor.floorID, 'up')\" *ngIf=\"floor.order > 0\" class=\"btn\"><i class=\"fa fa-arrow-up\"></i></a>\n            <a (click)=\"changeOrder(floor.floorID, 'down')\" *ngIf=\"floor.order < floors.length - 1\"\n              class=\"btn\"><i class=\"fa fa-arrow-down\"></i></a>\n            <a (click)=\"showDeleteFloorConfirmation(floor.floorID)\" class=\"btn\"><i class=\"fa fa-trash\"></i></a>\n          </div>\n          <floor [floor]=\"floor\"></floor>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['styles/floors/floors.css']\n})\n\nexport class Floors {\n  floors: Array<IFloor>;\n  overlayObservable;\n  showConfirmDeletion: boolean;\n  isLoading: boolean;\n  designMode: boolean;\n  isIonic: boolean;\n  selectedFloor: string;\n\n  constructor(private floorService: FloorService, private DesignService: DesignService,\n    private AppService: AppService) {\n    this.overlayObservable = this.AppService.overlayObservable;\n    this.isIonic = this.AppService.isIonic;\n  }\n\n  ngOnInit() {\n    this.fetchAll();\n    this.designMode = this.DesignService.designModeState;\n    this.overlayObservable\n      .subscription\n      .subscribe((res) => {\n        if (res.type === 'response') {\n          if (res.data === true) {\n            this.deleteFloor(res.id);\n          }\n        }\n      });\n  }\n\n  addFloor() {\n    this.isLoading = true;\n    this.floorService.addFloor('Untitled floor')\n      .delay(500)\n      .subscribe(\n        (res: any) => {\n          this.isLoading = false;\n          let floors = res.json().data;\n          floors = _.sortBy(floors, 'order');\n          this.floors = floors;\n        }\n      );\n  }\n\n  fetchAll() {\n    this.isLoading = true;\n    this.floorService.fetchAll()\n      .subscribe(\n        (res: any) => {\n          this.isLoading = false;\n          let floors = res.json().data;\n          floors = _.sortBy(floors, 'order');\n          this.floors = floors;\n          if (this.isIonic && this.floors.length > 0) {\n            this.selectedFloor = this.floors[0].floorID;\n          }\n        }\n      );\n  }\n\n  changeSelectedFloor(floorID) {\n    this.selectedFloor = floorID;\n    console.log(floorID);\n  }\n\n  showDeleteFloorConfirmation(id) {\n    this.showConfirmDeletion = true;\n    if (this.overlayObservable.subscription) {\n      this.overlayObservable.subscription\n        .next({\n          type: 'show',\n          message: `You are about to delete a floor. Are you sure you want to do that?\n            Be aware that you will also delete the reservations.`,\n          panelType: 'confirmation',\n          id: id\n        });\n    }\n  }\n\n  deleteFloor(floorID) {\n    this.floorService.deleteFloor(floorID)\n      .delay(200)\n      .subscribe(\n        (res: any) => {\n          if (res.status === 204) {\n            _.remove(this.floors, { floorID: floorID });\n          }\n        }\n      );\n  }\n\n  changeOrder(id, direction) {\n    this.floorService.changeOrder(id, direction)\n      .delay(200)\n      .subscribe(\n        (res: any) => {\n          let floors = res.json().data;\n          floors = _.sortBy(floors, 'order');\n          this.floors = floors;\n        }\n      );\n  }\n\n}\n"],"sourceRoot":"/source/"}